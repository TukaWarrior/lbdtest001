<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ch.hftm</groupId>
  <artifactId>anygui</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>anygui</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <javafx.version>23.0.1</javafx.version> <!-- JavaFX version -->
    <javalin.version>6.3.0</javalin.version> <!-- Javalin version -->
    <jetty.version>11.0.16</jetty.version> <!-- Jetty version -->
    <slf4j.version>2.0.16</slf4j.version> <!-- SLF4J version -->
    <junit.version>5.11.0</junit.version> <!-- JUnit 5 version -->
    <toml4j.version>0.7.3</toml4j.version> <!-- TOML4J version -->
    <mockito.version>5.14.1</mockito.version> <!-- Mockito version -->
    <mockito.inline.version>5.2.0</mockito.inline.version> <!-- Mockito Inline version -->
    <logback.version>1.5.8</logback.version> <!-- Logback version -->
    <jackson.version>2.15.0</jackson.version> <!-- Jackson version -->
    <json-schema.version>1.4.0</json-schema.version> <!-- Json Schema version -->
    <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version> <!-- JavaFX Maven plugin version -->
    <maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version> <!-- Maven surefire plugin version -->

    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
  </properties>

  <dependencies>

    <!-- JavaFX Dependencies -->
    <dependency> <!-- JavaFX Controls: Core UI components library for building JavaFX applications -->
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency> <!-- JavaFX FXML: Support for declarative UI layout using FXML markup -->
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency> <!-- JavaFX Web: WebView component for embedding web content in JavaFX applications -->
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>${javafx.version}</version>
    </dependency>

    <!-- TOML4J for TOML parsing -->
    <dependency> <!-- TOML4J: Java library for parsing and handling TOML configuration files -->
      <groupId>io.hotmoka</groupId>
      <artifactId>toml4j</artifactId>
      <version>${toml4j.version}</version>
    </dependency>

    <!-- JUnit 5 for testing -->
    <dependency> <!-- JUnit Jupiter API: Core framework for writing and running unit tests in Java -->
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency> <!-- JUnit Jupiter Engine: Test engine for executing JUnit 5 tests -->
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- SLF4J for logging -->
    <dependency> <!-- SLF4J API: Provides the logging facade/interface for Java applications -->
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency> <!-- Logback Classic: Main logging implementation of SLF4J with advanced features -->
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>  <!-- Logback Core: Provides core logging functionality required by Logback Classic -->
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
    </dependency>

    <!-- Javalin dependency -->
    <dependency> <!-- Javalin: Lightweight web framework for creating REST APIs in Java/Kotlin -->
      <groupId>io.javalin</groupId>
      <artifactId>javalin</artifactId>
      <version>${javalin.version}</version>
    </dependency>

    <!-- Jetty dependencies -->
    <dependency> <!-- Jetty Server: Core HTTP server engine for handling web requests -->
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency> <!-- Jetty Servlet: Provides servlet container support for web applications -->
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>

    <!-- Mockito for unit testing -->
    <dependency> <!-- Mockito JUnit Jupiter: Integration between Mockito and JUnit 5 for mock testing -->
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency> <!-- Mockito Core: Main mocking framework for creating test doubles in Java -->
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId> <!-- Mockito Inline: Extends Mockito to mock final classes and methods -->
      <artifactId>mockito-inline</artifactId>
      <version>${mockito.inline.version}</version>
      <scope>test</scope>
    </dependency>


    <!-- Jackson for JSON processing -->
    <dependency> <!-- Jackson Databind: JSON parser and object mapper for Java object serialization/deserialization -->
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.networknt</groupId> <!-- Json Schema Validator: Validates JSON documents against JSON Schema specifications -->
      <artifactId>json-schema-validator</artifactId>
      <version>${json-schema.version}</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <!-- JavaFX Maven Plugin: Configures and runs JavaFX applications through Maven -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>${javafx.maven.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>ch.hftm.App</mainClass>
          <options>
            <option>--add-modules=javafx.controls,javafx.fxml</option>
          </options>
        </configuration>
      </plugin>

      <!-- Maven Surefire Plugin: Executes unit tests during the build lifecycle -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
      </plugin>

    </plugins>
  </build>
</project>
